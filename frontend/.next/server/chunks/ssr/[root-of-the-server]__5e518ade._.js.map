{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/elena/Desktop/MSA/spring-cloud-msa-labs-v1/frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n  endpoint: string,\r\n  options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(url, config);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) => \r\n    apiRequest<Order>('/orders', {\r\n      method: 'POST',\r\n      body: JSON.stringify(order),\r\n    }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n};\r\n\r\n// 타입 정의\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WACpB,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAEzB,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC1D;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,CAAC,OAAO,EAAE,IAAI;AAC1D;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,CAAC,UAAU,EAAE,IAAI;AACnE;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACZ,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACF,UAAU,CAAC,KAAe,WAAkB,CAAC,QAAQ,EAAE,IAAI;AAC7D","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///Users/elena/Desktop/MSA/spring-cloud-msa-labs-v1/frontend/src/app/products/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { Product, productApi } from '@/lib/api';\r\n\r\nexport default function ProductsPage() {\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const data = await productApi.getAllProducts();\r\n        setProducts(data);\r\n      } catch (err) {\r\n        setError('상품을 불러오는 중 오류가 발생했습니다.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  if (loading) return <div className=\"p-8\">로딩 중...</div>;\r\n  if (error) return <div className=\"p-8 text-red-500\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">상품 목록</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {products.map((product) => (\r\n          <div key={product.id} className=\"border rounded-lg p-6 shadow-lg\">\r\n            <h2 className=\"text-xl font-semibold mb-2\">{product.name}</h2>\r\n            <p className=\"text-gray-600 mb-3\">{product.description}</p>\r\n            <p className=\"text-lg font-bold text-blue-600 mb-2\">\r\n              ₩{product.price.toLocaleString()}\r\n            </p>\r\n            <p className=\"text-sm text-gray-500 mb-4\">\r\n              재고: {product.stockQuantity}개\r\n            </p>\r\n            \r\n            <Link \r\n              href={`/products/${product.id}`}\r\n              className=\"inline-block bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n            >\r\n              상세 보기\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB;YACpB,IAAI;gBACF,MAAM,OAAO,MAAM,iHAAA,CAAA,aAAU,CAAC,cAAc;gBAC5C,YAAY;YACd,EAAE,OAAO,KAAK;gBACZ,SAAS;gBACT,QAAQ,KAAK,CAAC;YAChB,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE;IAEL,IAAI,SAAS,qBAAO,8OAAC;QAAI,WAAU;kBAAM;;;;;;IACzC,IAAI,OAAO,qBAAO,8OAAC;QAAI,WAAU;kBAAoB;;;;;;IAErD,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,8OAAC;gBAAI,WAAU;0BACZ,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC;wBAAqB,WAAU;;0CAC9B,8OAAC;gCAAG,WAAU;0CAA8B,QAAQ,IAAI;;;;;;0CACxD,8OAAC;gCAAE,WAAU;0CAAsB,QAAQ,WAAW;;;;;;0CACtD,8OAAC;gCAAE,WAAU;;oCAAuC;oCAChD,QAAQ,KAAK,CAAC,cAAc;;;;;;;0CAEhC,8OAAC;gCAAE,WAAU;;oCAA6B;oCACnC,QAAQ,aAAa;oCAAC;;;;;;;0CAG7B,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,EAAE;gCAC/B,WAAU;0CACX;;;;;;;uBAbO,QAAQ,EAAE;;;;;;;;;;;;;;;;AAqB9B","debugId":null}}]
}