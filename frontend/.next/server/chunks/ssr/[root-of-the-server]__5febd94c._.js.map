{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/elena/Desktop/MSA/spring-cloud-msa-labs-v1/frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n  endpoint: string,\r\n  options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(url, config);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) => \r\n    apiRequest<Order>('/orders', {\r\n      method: 'POST',\r\n      body: JSON.stringify(order),\r\n    }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n};\r\n\r\n// 타입 정의\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WACpB,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAEzB,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC1D;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,CAAC,OAAO,EAAE,IAAI;AAC1D;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,CAAC,UAAU,EAAE,IAAI;AACnE;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACZ,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACF,UAAU,CAAC,KAAe,WAAkB,CAAC,QAAQ,EAAE,IAAI;AAC7D","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///Users/elena/Desktop/MSA/spring-cloud-msa-labs-v1/frontend/src/app/order/success/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Order, orderApi } from '@/lib/api';\r\n\r\nexport default function OrderSuccessPage() {\r\n  const [order, setOrder] = useState<Order | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const searchParams = useSearchParams();\r\n  const orderId = searchParams.get('orderId');\r\n\r\n  useEffect(() => {\r\n    const fetchOrder = async () => {\r\n      if (!orderId) {\r\n        setError('주문 ID가 없습니다.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const data = await orderApi.getOrder(Number(orderId));\r\n        setOrder(data);\r\n      } catch (err) {\r\n        setError('주문 정보를 불러올 수 없습니다.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOrder();\r\n  }, [orderId]);\r\n\r\n  if (loading) return <div className=\"p-8\">로딩 중...</div>;\r\n  if (error) return <div className=\"p-8 text-red-500\">{error}</div>;\r\n  if (!order) return <div className=\"p-8\">주문 정보를 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <div className=\"max-w-lg mx-auto text-center\">\r\n        <div className=\"bg-green-100 border border-green-300 rounded-lg p-8 mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-green-800 mb-4\">주문 완료!</h1>\r\n          <p className=\"text-green-700 mb-4\">\r\n            주문이 성공적으로 처리되었습니다.\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"bg-white border rounded-lg p-6 shadow-lg mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">주문 상세 정보</h2>\r\n          \r\n          <div className=\"space-y-3 text-left\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 번호:</span>\r\n              <span>#{order.id}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 금액:</span>\r\n              <span className=\"font-bold text-blue-600\">\r\n                ₩{order.totalAmount.toLocaleString()}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 상태:</span>\r\n              <span className=\"text-green-600 font-medium\">{order.status}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 시간:</span>\r\n              <span>{new Date(order.createdAt).toLocaleString()}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <Link \r\n            href=\"/products\"\r\n            className=\"block bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600\"\r\n          >\r\n            계속 쇼핑하기\r\n          </Link>\r\n          \r\n          <Link \r\n            href=\"/\"\r\n            className=\"block bg-gray-500 text-white px-6 py-3 rounded hover:bg-gray-600\"\r\n          >\r\n            홈으로\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,UAAU,aAAa,GAAG,CAAC;IAEjC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa;YACjB,IAAI,CAAC,SAAS;gBACZ,SAAS;gBACT,WAAW;gBACX;YACF;YAEA,IAAI;gBACF,MAAM,OAAO,MAAM,iHAAA,CAAA,WAAQ,CAAC,QAAQ,CAAC,OAAO;gBAC5C,SAAS;YACX,EAAE,OAAO,KAAK;gBACZ,SAAS;gBACT,QAAQ,KAAK,CAAC;YAChB,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG;QAAC;KAAQ;IAEZ,IAAI,SAAS,qBAAO,8OAAC;QAAI,WAAU;kBAAM;;;;;;IACzC,IAAI,OAAO,qBAAO,8OAAC;QAAI,WAAU;kBAAoB;;;;;;IACrD,IAAI,CAAC,OAAO,qBAAO,8OAAC;QAAI,WAAU;kBAAM;;;;;;IAExC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAyC;;;;;;sCACvD,8OAAC;4BAAE,WAAU;sCAAsB;;;;;;;;;;;;8BAKrC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAA6B;;;;;;sCAE3C,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,8OAAC;;gDAAK;gDAAE,MAAM,EAAE;;;;;;;;;;;;;8CAGlB,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,8OAAC;4CAAK,WAAU;;gDAA0B;gDACtC,MAAM,WAAW,CAAC,cAAc;;;;;;;;;;;;;8CAItC,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,8OAAC;4CAAK,WAAU;sDAA8B,MAAM,MAAM;;;;;;;;;;;;8CAG5D,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,8OAAC;sDAAM,IAAI,KAAK,MAAM,SAAS,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;8BAKrD,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,4JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;sCACX;;;;;;sCAID,8OAAC,4JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}}]
}